version: 2.1

jobs:
  obtain_parameters:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - install_rust
      - run:
          name: Install paramfetch from head of rust-fil-proofs master branch
          command: |
            # install paramfetch
            cargo install filecoin-proofs --bin=paramcache --force --git=https://github.com/filecoin-project/rust-fil-proofs.git --branch=master
            which paramcache || { printf '%s\n' "missing paramcache binary" >&2; exit 1; }
      - run:
          name: create paramfetch checksum
          command: md5sum $(which paramfetch) | cut -d ' ' -f 1 >> paramfetch-checksum.txt
      - restore_parameter_cache
      - run:
          name: Generate Groth parameters and verifying keys
          command: paramcache
      - persist_to_workspace:
          root: "."
          paths:
            - paramfetch-checksum.txt
      - save_parameter_cache

  cargo_fetch:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - install_rust
      - checkout
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_rust_cache
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: rustup component add rustfmt-preview
      - run: rustup component add clippy-preview
      - run: cargo update
      - run: cargo fetch
      - run: rustc +stable --version
      - run: rustc +$(cat rust-toolchain) --version
      - persist_to_workspace:
          root: "."
          paths:
            - Cargo.lock
      - save_rust_cache

  test:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_rust_cache
      - run:
          name: Test (stable)
          command: cargo +stable test --verbose --all
          no_output_timeout: 15m
      - run:
          name: Prune the output files
          command: |
            for file in target/debug/* target/debug/.??*; do
              [ -d $file -o ! -x $file ] && rm -r $file
            done
      - persist_to_workspace:
          root: "."
          paths:
            - target/debug/*

  test_release:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_rust_cache
      - run:
          name: Test (stable) in release profile
          command: |
            cargo +stable test --verbose --release --all
            RUSTFLAGS="-D warnings" cargo +stable build --examples --release --all

  ffi_regression:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    parameters:
      use_256M_sector_size:
        type: boolean
        default: false
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_parameter_cache
      - restore_rust_cache
      - run:
          name: Build the static lib for linking into the example
          command: ./scripts/build-release.sh $(cat ./rust-toolchain) --verbose --package sector-builder-ffi
      - run:
          name: run regression tests (examples) against libsector_builder_ffi.a
          command: <<# parameters.use_256M_sector_size >> TEST_LIVE_SEAL=true <</ parameters.use_256M_sector_size >> RUSTFLAGS="-L ./target/release -Z sanitizer=leak" cargo run --release --package sector-builder-ffi --example simple --target x86_64-unknown-linux-gnu

  test_ignored_release:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_parameter_cache
      - restore_rust_cache
      - run:
          name: Test (stable) in release profile
          command: cargo +stable test --verbose --release --all -- --ignored

  test_nightly:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_rust_cache
      - run:
          name: Test (nightly)
          command: cargo +$(cat rust-toolchain) test --verbose --all
          no_output_timeout: 15m

  bench_nightly:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_rust_cache
      - run:
          name: Benchmarks (nightly)
          command: cargo +$(cat rust-toolchain) build --benches --verbose --all
          no_output_timeout: 15m

  rustfmt:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_rust_cache
      - run:
          name: Run cargo fmt
          command: cargo fmt --all -- --check

  clippy:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_rust_cache
      - run:
          name: Run cargo clippy
          command: cargo clippy --all

  build_linux_release:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - configure_env
      - checkout
      - attach_workspace:
          at: "."
      - restore_rust_cache
      - run:
          name: Install jq
          command: apt-get install jq -yqq
      - run:
          name: Build the release
          command: ./scripts/build-release.sh $(cat ./rust-toolchain) --verbose --all
      - run:
          name: Publish release to GitHub
          command: bash ./scripts/publish-release.sh

  build_darwin_release:
    macos:
      xcode: "10.0.0"
    working_directory: ~/crate
    resource_class: large
    parameters:
      create_github_release:
        type: boolean
        default: false
    steps:
      - configure_env
      - install_rust
      - checkout
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: cargo update
      - run: cargo fetch
      - run:
          name: Install jq
          command: |
            mkdir $HOME/.bin
            curl --location https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64 --output $HOME/.bin/jq
            chmod +x $HOME/.bin/jq
      - run:
          name: Build the release
          command: ./scripts/build-release.sh $(cat ./rust-toolchain) --verbose --all
      - run:
          name: Publish release to GitHub
          command: true; <<# parameters.create_github_release >> bash ./scripts/publish-release.sh <</ parameters.create_github_release >>

workflows:
  version: 2
  test_all:
    jobs:
      - obtain_parameters
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch
      - test_release:
          requires:
            - cargo_fetch
      - ffi_regression:
          use_256M_sector_size: false
          requires:
            - cargo_fetch
            - obtain_parameters
          filters:
            branches:
              ignore: master
      - ffi_regression:
          use_256M_sector_size: true
          requires:
            - cargo_fetch
            - obtain_parameters
          filters:
            branches:
              only: master
      - test_ignored_release:
          requires:
            - cargo_fetch
            - obtain_parameters
      - test:
          requires:
            - cargo_fetch
      - test_nightly:
          requires:
            - cargo_fetch
      - bench_nightly:
          requires:
            - cargo_fetch
      - build_linux_release:
          requires:
            - cargo_fetch
          filters:
            branches:
              only: master
      - build_darwin_release:
          create_github_release: false
          requires:
            - cargo_fetch
          filters:
            branches:
              ignore: master
      - build_darwin_release:
          create_github_release: true
          requires:
            - cargo_fetch
          filters:
            branches:
              only: master

commands:
  configure_env:
    steps:
      - run:
          name: Configure environment variables
          command: |
            echo 'export RUST_LOG=info' >> $BASH_ENV
            echo 'export FILECOIN_PARAMETER_CACHE="/tmp/filecoin-parameter-cache"' >> $BASH_ENV
            echo 'export RUST_BACKTRACE=1' >> $BASH_ENV
            echo 'export CARGO_HOME=/tmp/cargo' >> $BASH_ENV
            echo 'export RUSTUP_HOME=/tmp/rustup' >> $BASH_ENV
            echo 'export CIRCLE_ARTIFACTS=/tmp/circle-ci-artifacts' >> $BASH_ENV
            echo 'export PATH="${CARGO_HOME}/bin:${PATH}"' >> $BASH_ENV
            source $BASH_ENV
  restore_parameter_cache:
    steps:
      - restore_cache:
          key: cargo-v4c-{{ checksum "paramfetch-checksum.txt" }}
          paths:
            - /tmp/filecoin-parameter-cache
  restore_rust_cache:
    steps:
      - restore_cache:
          key: cargo-v4c-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
  save_parameter_cache:
    steps:
      - save_cache:
          key: cargo-v4c-{{ checksum "paramfetch-checksum.txt" }}
          paths:
            - /tmp/filecoin-parameter-cache
  save_rust_cache:
    steps:
      - save_cache:
          key: cargo-v4c-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - /tmp/cargo
            - /tmp/rustup
  install_rust:
    steps:
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y